---
description: Contains information about web project, which contains api endpoints and controllers. Apply based on project structure rules.
globs: src/Web/**
---


The api should reflect structure of requests in Application project
- include only mediatr request object as parameter in web api method.

When you use route parameters such as `id` or `listid`, check if the id matches id in request, which is mapped from body, otherwise throw bad request.
`BadRequest("Route ID does not match command ID")`
- do not do this for request, that contains only id fields such as `id` or `listid`, that can be only fetched from route parameters
    - f.e [DeleteTodoList.cs](mdc:src/Application/TodoLists/Commands/DeleteTodoList/DeleteTodoList.cs) contains only id fields. create request in body of method from route parameters instead adding it as parameter

do not use `CreatedAtAction`.

use mediatr ISender to send requests to Application layer
```c#
private readonly ISender _sender;
public TodoListController(ISender sender) => _sender = sender;
```

use these attributes:
- use authorize attribute since all users must be authenticated to use this service
```c#
[Authorize]
[ApiController]
[Route("api/[controller]")]
public class TodoListController : ControllerBase
```


# when editing or creating new files, you can get inspired by these files:


Dependency injection
- [DependencyInjection.cs](mdc:src/Web/DependencyInjection.cs)

TodoList controller
- "src/Web/Controllers/TodoListController.cs"
- [TodoListController.cs](mdc:src/Web/Controllers/TodoListController.cs)
